//NAME: KRISH MODI
//DATE: January 28 2022
//DESCRIPTION: This is the main menu form
package pkg3dtictactoe;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class Menu extends JFrame implements ActionListener {

    JButton btnBack;
    JButton btnEasy;
    JButton btnHard;
    JButton btnHelp;
    JButton btnMedium;
    JButton btnSingle;
    JButton btnTwo;
    JLabel lblInstruct;
    JLabel lblTitle;
    JPanel pnlTurn;
    JButton btnX;
    JButton btnO;
    JLabel lblPlayAs;
    
    int opponent;       //opponent is 1 for reinforced ai and 2 for minimiax ai
    int miniLvl = 0;    //contains the generation number for minimax ai. Medium is 2 and hard is 4
    
    //Constructor
    public Menu() {
        addComponents();
        this.setSize(550, 400);
        this.setResizable(false);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
    
    //Adds all of the components to JFrame
    public void addComponents() {
        lblTitle = new javax.swing.JLabel();
        btnTwo = new javax.swing.JButton();
        btnSingle = new javax.swing.JButton();
        btnHelp = new javax.swing.JButton();
        btnEasy = new javax.swing.JButton();
        btnMedium = new javax.swing.JButton();
        btnHard = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblInstruct = new javax.swing.JLabel();
        pnlTurn = new javax.swing.JPanel();
        btnX = new javax.swing.JButton();
        btnO = new javax.swing.JButton();
        lblPlayAs = new javax.swing.JLabel();

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblTitle.setText("Welcome to 3D Tic Tac Toe");

        btnTwo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnTwo.setText("Two Player");

        btnSingle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnSingle.setText("Single Player");

        btnHelp.setText("Help");

        btnEasy.setText("Easy");

        btnMedium.setText("Meduim");

        btnHard.setText("Hard");

        btnBack.setText("Back");

        lblInstruct.setText("Click Easy for Reinforced AI. Click Medium or Hard for Minimax AI");

        btnX.setText("X");
        
        btnO.setText("O");

        lblPlayAs.setText("Play as:");
        
        JPanel main = new JPanel();
        //This code is generated by the GUI
        javax.swing.GroupLayout pnlTurnLayout = new javax.swing.GroupLayout(pnlTurn);
        pnlTurn.setLayout(pnlTurnLayout);
        pnlTurnLayout.setHorizontalGroup(
            pnlTurnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTurnLayout.createSequentialGroup()
                .addGroup(pnlTurnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTurnLayout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(btnX)
                        .addGap(18, 18, 18)
                        .addComponent(btnO))
                    .addGroup(pnlTurnLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(lblPlayAs)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlTurnLayout.setVerticalGroup(
            pnlTurnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTurnLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(lblPlayAs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlTurnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnX)
                    .addComponent(btnO))
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(main);
        main.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnHelp))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(107, 107, 107)
                                .addComponent(lblTitle))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(126, 126, 126)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnSingle)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnTwo))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(pnlTurn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(btnEasy)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(btnMedium)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnHard)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(btnBack)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addComponent(lblInstruct)))
                        .addGap(0, 50, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnHelp)
                .addGap(59, 59, 59)
                .addComponent(lblTitle)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTwo)
                    .addComponent(btnSingle))
                .addGap(18, 18, 18)
                .addComponent(lblInstruct)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEasy)
                    .addComponent(btnMedium)
                    .addComponent(btnHard)
                    .addComponent(btnBack))
                .addGap(18, 18, 18)
                .addComponent(pnlTurn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );
        main.setVisible(true);
        
        //Sets level 2 and 3 buttons and labels to invisible
        btnEasy.setVisible(false);
        btnMedium.setVisible(false);
        btnHard.setVisible(false);
        btnBack.setVisible(false);
        btnX.setVisible(false);
        btnO.setVisible(false);
        lblInstruct.setVisible(false);
        lblPlayAs.setVisible(false);
        
        //Adds action listeners to all of the buttons
        btnSingle.addActionListener(this);
        btnTwo.addActionListener(this);
        btnHelp.addActionListener(this);
        btnEasy.addActionListener(this);
        btnMedium.addActionListener(this);
        btnHard.addActionListener(this);
        btnBack.addActionListener(this);
        btnX.addActionListener(this);
        btnO.addActionListener(this);
        
        this.add(main);
        this.setVisible(true);
    }
    
    
    @Override
    public void actionPerformed(ActionEvent ae) {
        if (ae.getSource() == btnSingle) {
            //If user is playing single player, they will play again AI. Show the AI options and hide player opitons.
            showFirst(false);
            showSecond(true);
        } else if (ae.getSource() == btnTwo) {
            //If user is playing two players, they will play against each other. Start game as AI is not necessary.
            Game game;
            try {
                this.setVisible(false);
                game = new Game();
                game.addComponents();
                game.play();
            } catch (FileNotFoundException ex) {
                lblInstruct.setText("An error occured");
            } catch (IOException ex) {
                lblInstruct.setText("An error occured");
            }
        } else if (ae.getSource() == btnEasy) {
            //If AI is easy, set opponent to Reinforced AI. Hide AI options and show turn options.
            opponent = 1;   //Reinforced AI
            showSecond(false);
            showThird(true);
        } else if (ae.getSource() == btnMedium) {
            //Medium AI is 2 gen Minimax AI
            opponent = 2;   //Minimax AI
            miniLvl = 2;    //Contains the depth to search
            showSecond(false);
            showThird(true);
        } else if (ae.getSource() == btnHard) {
            //Hard AI is 4 gen Minimax AI
            opponent = 2;   //Minimax AI
            miniLvl = 3;    //Contains the depth to search
            showSecond(false);
            showThird(true);
        } else if (ae.getSource() == btnBack) {
            //Hide AI options and show player options if back is pressed
            showSecond(false);
            showFirst(true);
        } else if (ae.getSource() == btnX) {
            //If player wants to play as X
            Game game;
            try {
                if (opponent == 1) {
                    //If user previously selected easy, play against reinforced ai
                    ReinforcedAI ai = new ReinforcedAI("10000.txt");
                    game = new Game(ai, true);
                } else {
                    //If uesr selected hard or medium, play against minimax ai with the coorsponding gen num.
                    MinimaxAI ai = new MinimaxAI(miniLvl);
                    game = new Game(ai, true);
                }
                this.setVisible(false);
                game.addComponents();   //Adds game components
                game.play();            //Calls play method of game
            } catch (FileNotFoundException ex) {
                lblInstruct.setText("An error occured");    //If 10000.txt is not found
            } catch (IOException ex) {
                lblInstruct.setText("An error occured");    //If Reinforced AI cannot write it's findings
            }
        } else if (ae.getSource() == btnO) {
            //Same as if X was pressed but user does not get first turn
            Game game;
            try {
                if (opponent == 1) {
                    ReinforcedAI ai = new ReinforcedAI("10000.txt");
                    game = new Game(ai, false);     //false indicates AI gets first turn
                } else {
                    MinimaxAI ai = new MinimaxAI(miniLvl);
                    game = new Game(ai, false);     //false indicates AI gets first turn
                }
                this.setVisible(false);
                game.addComponents();
                game.play();
            } catch (FileNotFoundException ex) {
                lblInstruct.setText("An error occured");
            } catch (IOException ex) {
                lblInstruct.setText("An error occured");
            }
        } else if (ae.getSource() == btnHelp) {
            Help help = new Help();
            this.setVisible(false);
        }
    }
    
    //Simplify the process of showing and hinding the player options
    public void showFirst(boolean show) {
        btnSingle.setVisible(show);
        btnTwo.setVisible(show);
    }
    
    //Simplify the process of showing and hinding the AI options
    public void showSecond(boolean show) {
        btnEasy.setVisible(show);
        btnMedium.setVisible(show);
        btnHard.setVisible(show);
        btnBack.setVisible(show);
        lblInstruct.setVisible(show);
    }
    
    //Simplify the process of showing and hinding the turn options
    public void showThird(boolean show) {
        btnX.setVisible(show);
        btnO.setVisible(show);
        lblPlayAs.setVisible(show);
    }
}
